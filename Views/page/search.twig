<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <title>Youtube V3 api Search youtube video demo</title>
    <link rel="stylesheet" type="text/css" href="../../youtube-dj-master/assets/css/pretty-json.css" />
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" type="text/css" />
    <link rel="stylesheet" href="../../youtube-dj-master/assets/css/maincss.css" type="text/css">

    <script src="//code.jquery.com/jquery-2.1.4.js" type="text/javascript"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js" type="text/javascript"></script>
    <!-- Underscore, backbone and pretty are used for displaying the json responce in user redable format -->
    <script type="text/javascript" src="../../youtube-dj-master/assets/js/underscore-min.js"></script>
    <script type="text/javascript" src="../../youtube-dj-master/assets/js/backbone-min.js"></script>
    <script type="text/javascript" src="../../youtube-dj-master/assets/js/pretty-json-min.js"></script>
</head>

<body>
<div class="row-fluid">
    <main id="content" role="main" class="span12">
        URL<input type="text" class="url-search">
        <button class="url-search-button">GO</button></br>
        <div id="player"></div>
        <!-- Begin Content -->
        <div id="hyv-page-container" style="clear:both;">
            <div class="hyv-content-alignment">
                <div id="hyv-page-content" class="" style="overflow:hidden;">
                    <div class="container-4">
                        <form action="" method="post" name="hyv-yt-search" id="hyv-yt-search">
                            <input type="search" name="hyv-search" id="hyv-search" placeholder="Search..." class="ui-autocomplete-input" autocomplete="off">
                            <button class="icon" id="hyv-searchBtn"></button>
                        </form>
                    </div>
                    <div>
                        <input type="hidden" id="pageToken" value="">
                        <div class="btn-group" role="group" aria-label="...">
                            <button type="button" id="pageTokenPrev" value="" class="btn btn-default">Prev</button>
                            <button type="button" id="pageTokenNext" value="" class="btn btn-default">Next</button>
                        </div>
                    </div>

                    <div id="hyv-watch-content" class="hyv-watch-main-col hyv-card hyv-card-has-padding halfcp">
                        <h2>Resultats recherche</h2>
                        <ul id="hyv-watch-related" class="hyv-video-list">
                        </ul>
                    </div>

                    <div id="hyv-watch-content" class="hyv-watch-main-col hyv-card hyv-card-has-padding halfcp">
                        <h2>Related Videos</h2>
                        <ul id="hyv-watch-related" class="hyv-video-list relatedVideos">
                        </ul>
                    </div>

                    <!-- Ads width 300px holder end -->
                </div>
            </div>

            <div id="player2"></div>
        </div>
    </main>
    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 2. This code loads the IFrame Player API code asynchronously.
        var tag2 = document.createElement('script');

        tag2.src = "https://www.youtube.com/iframe_api";
        var secondScriptTag = document.getElementsByTagName('script')[1];
        secondScriptTag.parentNode.insertBefore(tag2, secondScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        var player2;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '260',
                width: '540',
                videoId: 'JPIhUaONiLU',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange,
                    'onError': onPlayerError,
                }
            });

            player2 = new YT.Player('player2', {
                height: '360',
                width: '640',
                videoId: 'JPIhUaONiLU',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange,
                    'onError': onPlayerError,
                }
            });
        }




        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {

        }
        function stopVideo() {
            player.stopVideo();
        }

        function onPlayerError() {
            alert('mauvais lien');
        }


        $(document).ready(function() {
            youtubeApiCall();
            $("#pageTokenNext").on( "click", function( event ) {
                $("#pageToken").val($("#pageTokenNext").val());
                youtubeApiCall();
            });
            $("#pageTokenPrev").on( "click", function( event ) {
                $("#pageToken").val($("#pageTokenPrev").val());
                youtubeApiCall();
            });
            $("#hyv-searchBtn").on( "click", function( event ) {
                youtubeApiCall();
                return false;
            });

            $(".url-search-button").click(function () {
                var newVideoValue = $('.url-search').val();
                var newVidId = newVideoValue.substr(newVideoValue.indexOf("=") + 1);
                console.log(newVidId);
                updateVideo(newVidId);
                youtubeApiGetVideoRelated(newVidId);
            });

            $(document).on( "click", '.loadNewVideo' ,function() {
                var newVidId = $(this).val();
                updateVideo(newVidId);
                youtubeApiGetVideoRelated(newVidId);
            });


            jQuery( "#hyv-search" ).autocomplete({
                source: function( request, response ) {
                    //console.log(request.term);
                    var sqValue = [];
                    jQuery.ajax({
                        type: "POST",
                        url: "http://suggestqueries.google.com/complete/search?hl=en&ds=yt&client=youtube&hjson=t&cp=1",
                        dataType: 'jsonp',
                        data: jQuery.extend({
                            q: request.term
                        }, {  }),
                        success: function(data){
                            //console.log(data[1]);
                            obj = data[1];
                            jQuery.each( obj, function( key, value ) {
                                sqValue.push(value[0]);
                            });
                            response( sqValue);
                        }
                    });
                },
                select: function( event, ui ) {
                    setTimeout( function () {
                        youtubeApiCall();
                    }, 300);
                }
            });
        });
        function youtubeApiCall(){
            $.ajax({
                cache: false,
                data: $.extend({
                    key: "{{ keyDev }}",
                    q: $('#hyv-search').val(),
                    part: 'id , snippet'
                }, {maxResults:20,pageToken:$("#pageToken").val()}),
                dataType: 'json',
                type: 'GET',
                timeout: 5000,
                url: 'https://www.googleapis.com/youtube/v3/search'
            })
                    .done(function(data) {
                        if (typeof data.prevPageToken === "undefined") {$("#pageTokenPrev").hide();}else{$("#pageTokenPrev").show();}
                        if (typeof data.nextPageToken === "undefined") {$("#pageTokenNext").hide();}else{$("#pageTokenNext").show();}
                        var items = data.items, videoList = "";
                        $("#pageTokenNext").val(data.nextPageToken);
                        $("#pageTokenPrev").val(data.prevPageToken);
                        $.each(items, function(index,e) {
                            console.log(e);
                            videoList = videoList + '<li class="hyv-video-list-item"><div class="hyv-content-wrapper"><a href="" class="hyv-content-link" title="'+e.snippet.title+'"><span class="title">'+e.snippet.title+'</span><span class="stat attribution">by <span>'+e.snippet.channelTitle+'</span></span></a></div><div class="hyv-thumb-wrapper"><a href="" class="hyv-thumb-link"><span class="hyv-simple-thumb-wrap"><img alt="'+e.snippet.title+'" src="'+e.snippet.thumbnails.high.url+'" width="120" height="90"><div class="queue-button"><p>Add to queue</p></div></span></a></div><button class="loadNewVideo" value="'+e.id.videoId+'">Go</button></li>';
                        });
                        $("#hyv-watch-related").html(videoList);
                    });
        }

        function updateVideo(videoId) {
            player.loadVideoById( videoId, "large");
        }

        function youtubeApiGetVideoRelated(videoId){
            $.ajax({
                cache: false,
                data: $.extend({
                    key: "{{ keyDev }}",
                    q: videoId,
                    part: 'id , snippet'
                },{ relatedToVideoId: videoId ,maxResults:20,pageToken:$("#pageToken").val(), type: 'video'}),
                dataType: 'json',
                type: 'GET',
                timeout: 5000,
                url: 'https://www.googleapis.com/youtube/v3/search'
            })
                    .done(function(data) {
                        var items = data.items, videoListRelated = "";
                        $.each(items, function(index,e) {
                            console.log(e);
                            videoListRelated = videoListRelated + '<li class="hyv-video-list-item"><div class="hyv-content-wrapper"><a href="" class="hyv-content-link" title="'+e.snippet.title+'"><span class="title">'+e.snippet.title+'</span><span class="stat attribution">by <span>'+e.snippet.channelTitle+'</span></span></a></div><div class="hyv-thumb-wrapper"><a href="" class="hyv-thumb-link"><span class="hyv-simple-thumb-wrap"><img alt="'+e.snippet.title+'" src="'+e.snippet.thumbnails.default.url+'" width="120" height="90"><div class="queue-button"><p>Add to queue</p></div></span></a></div><button class="loadNewVideo" value="'+e.id.videoId+'">Go</button></li>';
                        });
                        $(".relatedVideos").html(videoListRelated);
                    });

        }

    </script>
</div>
</body>

</html>